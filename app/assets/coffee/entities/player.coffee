define ["app", "apps/config/storage/localstorage", "entities/playlist"], (Swabcast) ->
  # Generated by CoffeeScript 1.6.3
  Swabcast.module "Entities", (Entities, Swabcast, Backbone, Marionette, $, _) ->
    API = undefined
    initializePlayerDataSyncData = undefined
    Entities.PlayerData = Backbone.Model.extend(
      url: "player"
      validate: (attrs) ->
        "must have media url"  unless attrs.mediaUrl
        "must have image url"  unless attrs.albumArt
        "must have valid uid"  unless attrs.uid
    )
    Entities.configureStorage Entities.PlayerData

    # Entities.PlayerDataStore = Backbone.Collection.extend(
    #   model: Entities.Episode
    #   url: "player"
    # )
    # Entities.configureStorage Entities.PlayerDataStore

    API =
      getPlayerData: ->
        defer = undefined
        playerSaveData = undefined
        promise = undefined
        playerSaveData = new Entities.PlayerData(id: 0)
        defer = $.Deferred()
        playerSaveData.fetch
          success: (data) ->
            defer.resolve data

          error: ->
            defer.resolve `undefined`

        promise = defer.promise()
        defer.promise()

      playerReset: ->
        playerSaveData = undefined
        playerSaveData = new Entities.PlayerData(id: 0)

    Swabcast.reqres.setHandler "player:savedata", ->
      API.getPlayer()

    Swabcast.commands.setHandler "playerdata:remove", ->
      API.playerReset()

    Swabcast.commands.setHandler "playerdata:add", (episodeModel) ->
      API.updateSaveData episodeModel

  return
